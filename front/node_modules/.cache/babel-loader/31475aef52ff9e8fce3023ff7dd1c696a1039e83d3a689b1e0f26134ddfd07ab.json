{"ast":null,"code":"import { validateFieldsNatively as r, toNestErrors as e } from \"@hookform/resolvers\";\nimport { appendErrors as o } from \"react-hook-form\";\nvar n = function (r, e) {\n    for (var n = {}; r.length;) {\n      var t = r[0],\n        s = t.code,\n        i = t.message,\n        a = t.path.join(\".\");\n      if (!n[a]) if (\"unionErrors\" in t) {\n        var u = t.unionErrors[0].errors[0];\n        n[a] = {\n          message: u.message,\n          type: u.code\n        };\n      } else n[a] = {\n        message: i,\n        type: s\n      };\n      if (\"unionErrors\" in t && t.unionErrors.forEach(function (e) {\n        return e.errors.forEach(function (e) {\n          return r.push(e);\n        });\n      }), e) {\n        var c = n[a].types,\n          f = c && c[t.code];\n        n[a] = o(a, e, n, s, f ? [].concat(f, t.message) : t.message);\n      }\n      r.shift();\n    }\n    return n;\n  },\n  t = function (o, t, s) {\n    return void 0 === s && (s = {}), function (i, a, u) {\n      try {\n        return Promise.resolve(function (e, n) {\n          try {\n            var a = Promise.resolve(o[\"sync\" === s.mode ? \"parse\" : \"parseAsync\"](i, t)).then(function (e) {\n              return u.shouldUseNativeValidation && r({}, u), {\n                errors: {},\n                values: s.raw ? i : e\n              };\n            });\n          } catch (r) {\n            return n(r);\n          }\n          return a && a.then ? a.then(void 0, n) : a;\n        }(0, function (r) {\n          if (function (r) {\n            return Array.isArray(null == r ? void 0 : r.errors);\n          }(r)) return {\n            values: {},\n            errors: e(n(r.errors, !u.shouldUseNativeValidation && \"all\" === u.criteriaMode), u)\n          };\n          throw r;\n        }));\n      } catch (r) {\n        return Promise.reject(r);\n      }\n    };\n  };\nexport { t as zodResolver };","map":{"version":3,"names":["n","parseErrorSchema","r","e","length","t","s","code","i","message","a","path","join","u","unionErrors","errors","type","forEach","push","c","types","f","o","concat","shift","zodResolver","Promise","resolve","mode","then","shouldUseNativeValidation","values","raw","Array","isArray","criteriaMode","reject"],"sources":["C:\\Users\\Home\\OneDrive\\Desktop\\peopledirectory\\front\\node_modules\\@hookform\\resolvers\\zod\\src\\zod.ts"],"sourcesContent":["import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport { FieldError, FieldErrors, appendErrors } from 'react-hook-form';\nimport { ZodError, z } from 'zod';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError =>\n  Array.isArray(error?.errors);\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n  async (values, _, options) => {\n    try {\n      const data = await schema[\n        resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n      ](values, schemaOptions);\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}